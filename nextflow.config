includeConfig "$baseDir/params.config"

process.shell = ['/bin/bash','-e']

manifest {
    name        = "PickyBinder"
    author      = 'Mich√®le Leemann'
    homePage    = 'https://github.com/PickyBinders/PickyBinder'
}

conda.enabled = true

singularity {
    autoMounts = 'true'
    singularity.enabled = true
    runOptions = '-B /scratch -B /home --nv'
}

import java.time.*
Date now = new Date()
timestamp = now.format("yyyyMMdd-HH:mm:ss")

report {
    enabled = true
    file    = "report_${timestamp}.html"
}

trace {
    enabled = true
    sep     = ','
    file    = "PickyBinder_trace_report_${timestamp}.csv"
    fields  = 'name,attempt,status,exit,error_action,hash,time,duration,realtime,cpus,%cpu,memory,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,workdir'
}

profiles {

    slurm {
        executor {
            name="slurm"
            queueSize = 150
            clusterOptions = "${params.cpu_options}"
            submitRateLimit = '5 sec'
            exitReadTimeout = '30 min'
        }

        process {
            containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
            time = { 15.min * task.attempt }
            clusterOptions = "${params.cpu_options}"
            memory = { 4.GB * task.attempt }
            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); (task.exitStatus in 137..143 && task.attempt <= 3) ? 'retry' : (task.exitStatus == 1 && task.attempt < 2) ? 'retry' : 'ignore' }
            maxRetries = 3

            withName: 'diffdock' {
                memory = { task.exitStatus == 137 ? 42.GB * task.attempt : 42.GB }
                clusterOptions = "${params.diffdock_options}"
                time = { 6.hour * task.attempt }
                maxRetries = 3
            }

            withName: 'diffdock_single' {
                memory = { task.exitStatus == 137 ? 42.GB * task.attempt : 42.GB }
                clusterOptions = "${params.diffdock_options}"
                time = { 15.min * Math.pow(2, task.attempt) }
                maxRetries = 3
            }
        
            withName: 'tankbind' {
                memory = { task.exitStatus == 137 ? 20.GB * task.attempt : 20.GB }
                time = { 10.min * task.attempt }
                maxRetries = 3
            }
        
            withName: 'p2rank' {
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                time = { 10.min * task.attempt }
                maxRetries = 3
            }
        
            withName: 'vina' {
                cpus = '8'
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.cpu_options}"
                maxRetries = 3
            }

            withName: 'smina_sdf' {
                cpus = '8'
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.cpu_options}"
                maxRetries = 3
            }

            withName: 'gnina_sdf' {
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.gnina_options}"
                time = { 5.min * Math.pow(4, task.attempt) }
                maxRetries = 3
            }

            withName: 'edmdock_single' {
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.edmdock_options}"
                time = { 5.min * Math.pow(4, task.attempt) }
                maxRetries = 3
            }

            withName: 'ost_scoring' {
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.cpu_options}"
                time = { 10.min * Math.pow(2, task.attempt) }
                maxRetries = 3
            }

            withName: 'ost_scoring_diffdock' {
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.cpu_options}"
                time = { 10.min * Math.pow(2, task.attempt) }
                maxRetries = 3
            }

            withName: 'combine_all_scores' {
                memory = { task.exitStatus == 137 ? 8.GB * task.attempt : 8.GB }
                clusterOptions = "${params.cpu_options}"
                time = '30min'
                maxRetries = 3
            }
        }
    }
}
